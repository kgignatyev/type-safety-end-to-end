syntax = "proto3";

package kgi.geography_api;
option java_package = "kgi.geography_api";
option go_package = "./;kgi_geography_api";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
//import "google/api/annotations.proto";
/*import "protoc-gen-openapiv2/options/annotations.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Geography";
    version: "1.0.x";
    description: "see more https://...";
    contact: {
      name: "KGI Inc.";
      url: "http://kgionline.com/";
      email: "kgignatyev@gmail.com";
    };
    license: {
      name: "BSD 3-Clause License";
      url: "https://opensource.org/licenses/BSD-3-Clause";
    };
  };
  base_path: "/api/v1/geography";
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

 */

message LatLng {
    // The latitude in degrees. It must be in the range [-90.0, +90.0].
    double lat = 1;
    // The longitude in degrees. It must be in the range [-180.0, +180.0].
    double lng = 2;
}

message Polygon {
    repeated LatLng vertices = 1;
}

enum AreaType {
   TEAM_CONTROL = 0;
   SERVICE_AREA = 1;
}

message Area {
    string id = 1;
    Polygon polygon = 2;
    string name = 3;
    AreaType area_type = 4;
    string title = 5;
}

message AreasList {
    repeated Area items = 1;
}

message AreaSearchCriteria {
    oneof criteria {
      string text = 1;//substring match, case insensitive
      LatLng contains_point = 2;
    }
}
service Geography {
    rpc CreateArea (Area) returns (Area) {
//        option ( google.api.http ) = {
//          post: "/api/v1/geography/areas"
//          body: "*"
//        };
    };
    rpc GetAreaByID (google.protobuf.StringValue) returns (Area) {
//        option (google.api.http) = {
//             get: "/api/v1/geography/areas/{value}"
//         };
    };

    rpc UpdateArea (Area) returns (Area) {
//        option ( google.api.http ) = {
//          put: "/api/v1/geography/areas"
//          body: "*"
//        };
    };
    // deprecated, use FindAreasBy
    rpc FindAreasContaining( LatLng ) returns (AreasList) {
        option deprecated = true;
//        option (google.api.http) = {
//             post: "/api/v1/geography/areas-find-containing"
//             body: "*"
//         };
    };

    rpc DeleteAreaByID(google.protobuf.StringValue ) returns (google.protobuf.Empty){
//        option ( google.api.http ) = {
//          delete: "/api/v1/geography/areas/{value}"
//        };
    };
    rpc FindAreas(google.protobuf.StringValue ) returns (AreasList){
//         option (google.api.http) = {
//             get: "/api/v1/geography/areas-find-by-text/{value}"
//         };
    };

    rpc FindAreasBy( AreaSearchCriteria ) returns (AreasList) {
//        option (google.api.http) = {
//             post: "/api/v1/geography/areas-find-by"
//             body: "*"
//         };
    };
}

